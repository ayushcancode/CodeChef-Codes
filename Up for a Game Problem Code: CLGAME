//https://www.codechef.com/problems/CLGAME

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

#define ff first
#define ss second
#define ll long long
#define pb push_back
#define pll pair<ll, ll>
#define pii pair<int, int>

#define sz(x) (int)x.size()
#define range(x) x.begin(),x.end()
#define rep(i,k,n) for(int i=k;i<n;i++)
#define show(x) cout<<#x<<" :: "<<x<<'\n';
#define iosbase ios_base::sync_with_stdio(false); cin.tie(NULL);
#define show2(x,y) cout<<#x<<" :: "<<x<<"\t"<<#y<<" :: "<<y<<'\n';
#define show3(x,y,z) cout<<#x<<" :: "<<x<<"\t"<<#y<<" :: "<<y<<"\t"<<#z<<" :: "<<z<<'\n';
#define oset tree<int , null_type, less<int> , rb_tree_tag, tree_order_statistics_node_update>

using namespace std;
using namespace __gnu_pbds;

const ll inf = 1e18;
const ll N = 2000005;
const ll mm = 1e9 + 7;

int main()
{
	#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	#endif
	iosbase;

	int test;
	cin>>test;
	while(test--)
	{
		int n, k;
		cin>>n>>k;

		int mx = -1;
		int idx = 0;
		rep(i,0,n)
		{
			int x;
			cin>>x;
			if(x > mx)
			{
				mx = x;
				idx = i + 1;
			}
		}

		vector<int> s(k);
		rep(i,0,k)
		{
			cin>>s[i];
		}

		int ans[n + 1] = {0};
		//show(idx);
		ans[idx - 1] = 1; // make the index less than the required index the winnings state
		// if we pick any element from this state then we win(for chef)
		for(int i = idx - 1; i >= 0; i--)
		{
			for(auto it : s)
			{
				if(i + it > n) continue; 
				if(ans[i + it] == 0)
				{
					ans[i] = 1;
					break;
				}
			}
		}

		if(ans[0]) cout<<"Chef\n";
		else cout<<"Garry\n";

	}
	
	return 0;
}
